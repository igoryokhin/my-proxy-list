name: Proxy Checker

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */3 * * *'

permissions:
  contents: write

jobs:
  check-proxies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies and Xray
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests
          XZIP="Xray-linux-64.zip"
          wget -q -O "${XZIP}" "https://github.com/XTLS/Xray-core/releases/download/v1.8.4/Xray-linux-64.zip"
          unzip -o "${XZIP}"
          XRAY_BIN=$(find . -maxdepth 3 -type f -name xray -print -quit || true)
          if [ -z "${XRAY_BIN}" ]; then
            echo "xray binary not found after unzip"
            ls -la
            exit 1
          fi
          sudo mv "${XRAY_BIN}" /usr/local/bin/xray
          sudo chmod +x /usr/local/bin/xray
          rm -f "${XZIP}" ./geoip.dat ./geosite.dat || true

      - name: Run proxy checker
        env:
          XRAY_PATH: /usr/local/bin/xray
        run: |
          set -euo pipefail
          sudo ln -sf /usr/local/bin/xray /usr/local/bin/xray.exe
          python -u proxy_checker.py

      - name: Save results snapshot (log)
        run: |
          set -euo pipefail
          echo "=== RESULTS DIR LISTING ==="
          if [ -d results ]; then
            find results -type f -maxdepth 5 -print -exec sh -c 'echo "---- head: {} ----"; head -n 30 "{}" || true' \;
          else
            echo "No results directory found."
          fi
        continue-on-error: true

      - name: Create timestamp
        id: ts
        run: echo "ts=$(date -u +%Y%m%dT%H%M%SZ)" >> "$GITHUB_ENV"

      - name: Zip results
        id: zipstep
        run: |
          set -euo pipefail
          if [ -d results ]; then
            ZIPNAME="results-${GITHUB_RUN_ID}-${ts}.zip"
            zip -r "$ZIPNAME" results > /dev/null || true
            echo "ZIPNAME=$ZIPNAME" >> "$GITHUB_ENV"
          else
            echo "ZIPNAME=" >> "$GITHUB_ENV"
          fi

      - name: Upload artifact
        if: env.ZIPNAME != ''
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ env.ts }}
          path: ${{ env.ZIPNAME }}
          retention-days: 7

      - name: Merge all update branches into main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"

          git fetch origin --prune

          echo ">>> Checking update branches..."
          UPDATE_BRANCHES=$(git for-each-ref --format='%(refname:short)' refs/remotes/origin/update/local-* || true)
          if [ -z "$UPDATE_BRANCHES" ]; then
            echo "No update branches found."
            exit 0
          fi

          for remote_ref in $UPDATE_BRANCHES; do
            branch_name=${remote_ref#origin/}
            echo "Merging $branch_name into main..."
            git checkout main
            git merge --no-edit "$remote_ref" || {
              echo "⚠️ Merge conflict in $branch_name — skipping."
              continue
            }
          done

          git add results ru || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "Auto-merge proxy updates ($(date -u +%Y-%m-%dT%H:%M:%SZ))"
          git push origin HEAD:main
