name: Proxy Checker

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

permissions:
  contents: write

jobs:
  check-proxies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies and Xray
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install requests

          # Скачиваем конкретный релиз Xray (можно поменять версию)
          XZIP="Xray-linux-64.zip"
          wget -q -O "${XZIP}" "https://github.com/XTLS/Xray-core/releases/download/v1.8.4/Xray-linux-64.zip"
          unzip -o "${XZIP}"

          # Ищем бинарник xray в текущей директории/подпапках
          XRAY_BIN=$(find . -maxdepth 3 -type f -name xray -print -quit || true)
          if [ -z "${XRAY_BIN}" ]; then
            echo "xray binary not found after unzip"
            ls -la
            exit 1
          fi

          sudo mv "${XRAY_BIN}" /usr/local/bin/xray
          sudo chmod +x /usr/local/bin/xray

          # Очистка временных файлов архива (если есть geosite/geoip — удаляем только из рабочей директории)
          rm -f "${XZIP}" || true
          rm -f ./geoip.dat ./geosite.dat || true

      - name: Run proxy checker
        env:
          XRAY_PATH: /usr/local/bin/xray
        run: |
          set -euo pipefail
          sudo ln -sf /usr/local/bin/xray /usr/local/bin/xray.exe
          python -u proxy_checker.py

      - name: Save results snapshot (log)
        run: |
          set -euo pipefail
          echo "=== RESULTS DIR LISTING ==="
          if [ -d results ]; then
            find results -type f -maxdepth 4 -print -exec sh -c 'echo "---- head: {} ----"; head -n 30 "{}" || true' \;
          else
            echo "No results directory found."
          fi
        continue-on-error: true

      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: results-archive-${{ github.run_id }}-$(date -u +"%Y%m%dT%H%M%SZ")
          path: results
          retention-days: 7

      - name: Commit results (safe pull/rebase then push)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Используем token в remote URL, чтобы можно было пушить
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"

          # Подготовим изменения — добавляем только results
          git add results || echo "No results to add"

          # Если нет staged изменений — выходим
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "Update proxy lists" || true

          # Попробуем подтянуть последние изменения и сделать rebase.
          set +e
          git fetch origin main --quiet
          git pull --rebase origin main
          RC=$?
          set -e

          if [ $RC -ne 0 ]; then
            echo "Rebase failed (exit $RC). Aborting rebase and skipping push to avoid conflicts."
            git rebase --abort || true
            exit 0
          fi

          # Пушим изменения
          git push origin HEAD:main
